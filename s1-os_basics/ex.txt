1a. No; make can be used in any compatible Unix based plataform to perform any compilation task.

2. Less redundancy (more space efficient); less portability.

3a. No.

5. Command line args are the command "words"; environment variables are global defined variables to be used by all processes.

5c. You can set with: "export <VAR_NAME> = <VAR_VALUE>;
unset with "unset <VAR_NAME>".
These are volatile; to make them permanent write them in .bash_profile or
.bashrc.

6. open(file) will fail if the file does not exist.

7. Manage the resources each program has access to; easy the use of the system by hiding low level system details.

8. It is:
-> Multi-user: processes owned by different users
-> Multiprogramming: various processes in memory
-> Timesharing: users and processes can do stuff, in a concurrent manner

9a. "date -s <date>" sets the system date and time, which is a privileged action that must be executed in kernel mode.
9b. "chmod +x <file>": changing the permission bits of a file (for a certain user) is a privileged action.

10. "time <command>" runs command and after execution prints the time it took to do so

12b. "wc <file>" lists number of lines, words and bytes of a file. "wc -c <file>" should give the same output as our program.